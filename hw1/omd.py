# Guido van Rossum <guido@python.org>
import random


def step2_no_umbrella(rain_state):
    home_returning = False
    walk_options = ('–ø–æ –ø–µ—Ä–µ—É–ª–∫–∞–º üè¢', '–Ω–∞ –∞–≤—Ç–æ–±—É—Å–µ üöå')
    print(
        '–£—Ç–∫–∞-–º–∞–ª—è—Ä ü¶Ü –Ω–µ –≤–∑—è–ª–∞ –∑–æ–Ω—Ç–∏–∫ ‚òÇÔ∏è, –¥–æ–≤–µ—Ä–∏–≤—à–∏—Å—å —Å–æ–ª–Ω–µ—á–Ω—ã–º '
        '–ø—Ä–æ–≥–Ω–æ–∑–∞–º –ø–æ–≥–æ–¥—ãüåû\n –í—Ä–µ–º—è –Ω–µ–ª–µ—Ç–Ω–æ–µ! üåì '
        '–ö–∞–∫ –∂–µ –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ –±–∞—Ä–∞: '
        f'{walk_options[0]} –∏–ª–∏ {walk_options[1]}?'
    )

    option = str(input()).lower().strip()
    while option not in [x[:-1].strip() for x in walk_options]:
        print('–ù–µ –ø–æ–Ω–∏–º–∞—é, –æ —á–µ–º —Ç—ã! –ë—ã—Ç—å –º–æ–∂–µ—Ç, —Ç—ã –ø—Ä–∏—Å–ª–∞–ª –º–Ω–µ '
              '–ª–∏—à–Ω—é—é –∫–∞—Ä—Ç–∏–Ω–∫—É? –ò–ª–∏ –∑–∞–±—ã–ª –ø—Ä–µ–¥–ª–æ–≥?')
        option = str(input()).lower().strip()

    if rain_state == 0:
        if option == walk_options[0][:-1].strip():
            print('–•–æ—Ä–æ—à–∞ –ø–æ–≥–æ–¥–∫–∞! ‚òÄÔ∏è –í–º–µ—Å—Ç–æ –±–∏–ª–µ—Ç–∞ –Ω–∞ –∞–≤—Ç–æ–±—É—Å —É—Ç–∫–∞-–º–∞–ª—è—Ä ü¶Ü '
                  '–∫—É–ø–∏—Ç –µ—â–µ –æ–¥–∏–Ω –º–∞—Ä—Ç–∏–Ω–∏!')
        else:
            print('–ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–±—ä—è—Å–Ω—è—Ç—å! ‚è∞ –ë—ã—Å—Ç—Ä–µ–µ –≤ –±–∞—Ä, –≤–æ–¥–∏—Ç–µ–ª—å! '
                  '–ë–µ–∑ –∑–æ–Ω—Ç–∞ –≤ —Å–∞–ª–æ–Ω–µ –º–µ–Ω—å—à–µ –Ω–∞–≥—Ä—É–∑–∫–∏! üöÄüöÄüöÄ')
    else:
        if option == walk_options[0][:-1].strip():
            rain_answer_dict = {'–ê': '–ª–µ—Ç–µ—Ç—å –≤ –±–∞—Ä –∏ –≥—Ä–µ—Ç—å—Å—è '
                                     '—Ä–µ–º–∞—Ä–∫–æ–≤—Å–∫–∏–º –∫–∞–ª—å–≤–∞–¥–æ—Å–æ–º',
                                '–ë': '–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —É —Ö–ª–µ–±–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞, '
                                     '–ø–æ–∫–∞ –Ω–µ –Ω–∞—á–∞–ª—Å—è –¥–æ–∂–¥—å',
                                '–í': '—É—Å—Ç—Ä–æ–∏—Ç—å –∑–≤–∞–Ω—ã–π —É–∂–∏–Ω –¥–æ–º–∞ '
                                     '–Ω–∞ —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏'}

            print('–°–≥—É—â–∞—é—Ç—Å—è —Ç—É—á–∫–∏ –Ω–∞–¥ —É—Ç–∫–æ–π-–º–∞–ª—è—Ä ü¶Ü '
                  '–°—Ç–æ–∏—Ç –ª–∏ –≤ –¥–æ–∂–¥—å –ª–µ—Ç–µ—Ç—å –≤ –±–∞—Ä?')

            for key, value in rain_answer_dict.items():
                print(key + ') ' + value)

            option = str(input()).upper().strip()
            while option not in rain_answer_dict.keys():
                print('–ù–µ —Å—Ç–æ–∏—Ç —à—É—Ç–∏—Ç—å —Å —É—Ç–∫–æ–π-–º–∞–ª—è—Äü¶Ü! '
                      '–°–∫–æ—Ä–µ–µ —Å–∫–∞–∂–∏, –ª–µ—Ç–µ—Ç—å –ª–∏ –µ–π –≤ –±–∞—Ä ‚åõ '
                      '–ò–ª–∏ –æ–Ω–∞ —Å–∫–∞–∂–µ—Ç —Å–≤–æ–µ–º—É –¥—Ä—É–≥—É –î—É–æ–ª–∏–Ω–≥–æ '
                      '–æ —Ç–≤–æ–∏—Ö –ø—Ä–æ—Å—Ç—É–ø–∫–∞—Ö...')
                option = str(input()).upper().strip()

            if option == '–í':
                home_returning = True
        else:
            print('–ù–µ –ø–æ–¥–≤–µ–ª–æ —á—É—Ç—å–µ —É—Ç–∫—É-–º–∞–ª—è—Ä ü¶Ü! –í–æ–¥–∏—Ç–µ–ª—å –∞–≤—Ç–æ–±—É—Å–∞ —Å–ø–∞—Å '
                  '–ø—è—Ç–Ω–∏—Ü—É, –æ—Ç–≤–µ–∑—è –µ–µ –≤ –±–∞—Ä! üç∫')

    if home_returning:
        print('–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –¥–æ–º–∞—à–Ω–∏–π –≤–µ—á–µ—Ä —É —É—Ç–∫–∏-–º–∞–ª—è—Ä ü¶Ü: '
              '—Å —Ç—É–ª—å—Å–∫–∏–º–∏ –ø—Ä—è–Ω–∏–∫–∞–º–∏ –ø–æ–¥ –≥–æ—Ä—è—á–∏–π —Å–∞–º–æ–≤–∞—Ä ü´ñ')
    else:
        home_returning_rain_state = ('–ö–∞–∫ —Ö–æ—Ä–æ—à–æ, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è '
                                     '–Ω–µ —Å–ª—É—á–∏–ª—Å—è –¥–æ–∂–¥—å!',
                                     '–ò –¥–æ–∂–¥—å –Ω–µ –ø–æ–º–µ—Ö–∞: –≤–µ–¥—å –æ–Ω –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!')
        print('–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –≤–µ—á–µ—Ä —É —É—Ç–∫–∏-–º–∞–ª—è—Ä ü¶Ü: –ø–æ—Ä–∞ '
              f'–≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –¥–æ–º–æ–π! {home_returning_rain_state[rain_state]}')


def step2_umbrella(rain_state):
    print(
        '–ú—É–¥—Ä–∞—è —É—Ç–∫–∞-–º–∞–ª—è—Ä ü¶Ü –í–∑—è–ª–∞ —Å —Å–æ–±–æ–π –∑–æ–Ω—Ç ‚òÇÔ∏è\n'
        '–°–µ–π—á–∞—Å –Ω–µ —Å–∫–∞–∑–∞—Ç—å: –ø–æ–π–¥–µ—Ç –¥–æ–∂–¥—å üåßÔ∏è –∏–ª–∏ –Ω–µ –ø–æ–π–¥–µ—Ç üåû'
    )
    if rain_state == 0:
        print('–ù–µ–º–Ω–æ–≥–æ –ø–æ —É–ª–∏—Ü–∞–º –≥–æ—Ä–æ–¥–∞ –ø—Ä–æ–π–¥—è—Å—å üè¢ —É—Ç–∫–∞-–º–∞–ª—è—Ä ü¶Ü '
              '—Ç–∞–∫–∏ —è–≤–∏–ª–∞—Å—å –≤ –ø—è—Ç–Ω–∏—á–Ω—ã–π –±–∞—Ä!')
    else:
        print('–°–≥—É—â–∞–ª–∏—Å—å —Ç—É—á–∏ üå©Ô∏è –Ω–∞–¥ —É—Ç–∫–æ–π-–º–∞–ª—è—Ä ü¶Ü, '
              '—Å–æ–±—Ä–∞–≤—à–∏—Å—å –∏—Å–ø–æ—Ä—Ç–∏—Ç—å –µ–π –ø—è—Ç–Ω–∏—á–Ω—ã–π –≤–µ—á–µ—Ä...'
              '–ù–µ –∑—Ä—è –±—ã–ª–∞ –º—É–¥—Ä–æ–π —É—Ç–∫–∞-–º–∞–ª—è—Ä ü¶Ü, –æ—Ç–∫—Ä—ã–≤—à–∞—è –∑–æ–Ω—Ç! '
              '–° —Å—É—Ö–∏–º –æ–ø–µ—Ä–µ–Ω–∏–µ–º —É—Ç–∫–∞-–º–∞–ª—è—Ä ü¶Ü –ø—Ä–∏—Ç–æ–ø–∞–ª–∞ –≤ –±–∞—Ä!')

    bar_objects = set(['—Å–∏–¥—Ä', '–∫–æ—Ñ–µ', '–≤–æ–¥–∞', '–≤–∏—Å–∫–∏', '—Ç–µ–∫–∏–ª–∞',
                       '–º–∞—Ä—Ç–∏–Ω–∏', '—á–∞–π'])    # —Å–µ—Ç –∏–∑ —Ç–æ–≥–æ, —á—Ç–æ –µ—Å—Ç—å –≤ –±–∞—Ä–µ

    print('–£ —Å—Ç–æ–π–∫–∏ —á–∏–∫–µ–Ω-–±–∞—Ä–º–µ–Ω üê• —Å–ø—Ä–æ—Å–∏–ª —É —É—Ç–∫–∏-–º–∞–ª—è—Ä ü¶Ü, '
          '—á—Ç–æ –µ–π —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã –≤—ã–ø–∏—Ç—å üç∏\n'
          '–ü–µ—Ä–µ—á–∏—Å–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —É—Ç–∫–∏-–º–∞–ª—è—Ä ü¶Ü')
    answer = str(input()).lower().replace(' ', '')

    # —Å–µ—Ç –∏–∑ —Ç–æ–≥–æ, —á—Ç–æ –ª—é–±–∏—Ç —É—Ç–∫–∞-–º–∞–ª—è—Ä
    duck_preferences = set(answer.split(','))

    # –Ω–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å–µ—Ç–æ–≤ –∏–∑ —Ç–æ–≥–æ,
    # —á—Ç–æ –µ—Å—Ç—å –≤ –±–∞—Ä–µ –∏ —Ç–æ–≥–æ, —á—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è —É—Ç–∫–µ
    if duck_preferences.intersection(bar_objects) == set():
        print('–ß–∏–∫–µ–Ω-–±–∞—Ä–º–µ–Ω üê• –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –Ω–∏—á–µ–≥–æ, —á—Ç–æ –Ω–∞–∑–≤–∞–ª–∞ —É—Ç–∫–∞-–º–∞–ª—è—Äü¶Ü\n'
              '–ù–æ –∑–∞—Ç–æ —Å–º–æ–≥ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –µ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫ üçæ –¥–ª—è —Ç–µ—Ö, '
              '—É –∫–æ–≥–æ –µ—Å—Ç—å –∑–æ–Ω—Ç‚òÇÔ∏è! –£—Ç–∫–∞-–º–∞–ª—è—Ä ü¶Ü –æ—Å—Ç–∞–ª–∞—Å—å —Ä–∞–¥–∞!')
    else:
        duck_preferences_string = ', '.join(
            duck_preferences.intersection(bar_objects)
        )
        print('–ß–∏–∫–µ–Ω-–±–∞—Ä–º–µ–Ω üê• –Ω–∞–ª–∏–ª —É—Ç–∫–µ-–º–∞–ª—è—Ä ü¶Ü –≤—Å–µ, —á—Ç–æ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ '
              f' –¥–ª—è –Ω–µ–µ: {duck_preferences_string} - –≤—Å–µ –≤—ã–ø–∏–ª–∞ '
              '—É—Ç–∫–∞-–º–∞–ª—è—Ä ü¶Ü –∏ –æ—Å—Ç–∞–≤–∏–ª–∞ —á–∏–∫–µ–Ω-–±–∞—Ä–º–µ–Ω—É üê• –º–Ω–æ–≥–æ —á–∞–µ–≤—ã—Ö!')

    print('–ü–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –ø—è—Ç–Ω–∏—Ü–∞ —É—Ç–∫–µ-–º–∞–ª—è—Ä ü¶Ü! –ö–∞–∫ —Å–∫–∞–∑–∞–Ω–æ –≤ –ø–µ—Å–Ω—è—Ö, '
          '–ø–æ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –¥–æ–º–æ–π!')


def step1():
    print(
        '–£—Ç–∫–∞-–º–∞–ª—è—Ä ü¶Ü —Ä–µ—à–∏–ª–∞ –≤—ã–ø–∏—Ç—å –∑–∞–π—Ç–∏ –≤ –±–∞—Ä. '
        '–í–∑—è—Ç—å –µ–π –∑–æ–Ω—Ç–∏–∫? ‚òÇÔ∏è'
    )
    option = ''
    options = {'–¥–∞': True, '–Ω–µ—Ç': False}
    while option not in options:
        print('–í—ã–±–µ—Ä–∏—Ç–µ: {}/{}'.format(*options))
        option = input()

    rain_state = random.randint(0, 1)   # —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≥–æ, –ø–æ–π–¥–µ—Ç –ª–∏ –¥–æ–∂–¥—å
    if options[option]:
        return step2_umbrella(rain_state)
    return step2_no_umbrella(rain_state)


if __name__ == '__main__':
    step1()
